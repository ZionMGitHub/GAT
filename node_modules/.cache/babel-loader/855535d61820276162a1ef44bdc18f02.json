{"ast":null,"code":"import _toConsumableArray from \"/Users/coderschool/dev/Zion/newrepo/gat-dev/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/coderschool/dev/Zion/newrepo/gat-dev/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/coderschool/dev/Zion/newrepo/gat-dev/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/coderschool/dev/Zion/newrepo/gat-dev/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/Users/coderschool/dev/Zion/newrepo/gat-dev/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nvar _ERROR_DESCRIPTION_MA;\n\nimport { ErrorFactory, areCookiesEnabled, isIndexedDBAvailable, validateIndexedDBOpenable, getModularInstance, deepEqual } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { getApp, _getProvider, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport '@firebase/installations';\nvar name = \"@firebase/performance\";\nvar version = \"0.5.9\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\n\nvar TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\n\nvar TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\n\nvar TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\n\nvar OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\nvar FIRST_PAINT_COUNTER_NAME = '_fp';\nvar FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\nvar FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\nvar CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\nvar CONFIG_EXPIRY_LOCAL_STORAGE_KEY = '@firebase/performance/configexpire';\nvar SERVICE = 'performance';\nvar SERVICE_NAME = 'Performance';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar ERROR_DESCRIPTION_MAP = (_ERROR_DESCRIPTION_MA = {}, _defineProperty(_ERROR_DESCRIPTION_MA, \"trace started\"\n/* TRACE_STARTED_BEFORE */\n, 'Trace {$traceName} was started before.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"trace stopped\"\n/* TRACE_STOPPED_BEFORE */\n, 'Trace {$traceName} is not running.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"nonpositive trace startTime\"\n/* NONPOSITIVE_TRACE_START_TIME */\n, 'Trace {$traceName} startTime should be positive.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"nonpositive trace duration\"\n/* NONPOSITIVE_TRACE_DURATION */\n, 'Trace {$traceName} duration should be positive.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"no window\"\n/* NO_WINDOW */\n, 'Window is not available.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"no app id\"\n/* NO_APP_ID */\n, 'App id is not available.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"no project id\"\n/* NO_PROJECT_ID */\n, 'Project id is not available.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"no api key\"\n/* NO_API_KEY */\n, 'Api key is not available.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"invalid cc log\"\n/* INVALID_CC_LOG */\n, 'Attempted to queue invalid cc event'), _defineProperty(_ERROR_DESCRIPTION_MA, \"FB not default\"\n/* FB_NOT_DEFAULT */\n, 'Performance can only start when Firebase app instance is the default one.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"RC response not ok\"\n/* RC_NOT_OK */\n, 'RC response is not ok'), _defineProperty(_ERROR_DESCRIPTION_MA, \"invalid attribute name\"\n/* INVALID_ATTRIBUTE_NAME */\n, 'Attribute name {$attributeName} is invalid.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"invalid attribute value\"\n/* INVALID_ATTRIBUTE_VALUE */\n, 'Attribute value {$attributeValue} is invalid.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"invalid custom metric name\"\n/* INVALID_CUSTOM_METRIC_NAME */\n, 'Custom metric name {$customMetricName} is invalid'), _defineProperty(_ERROR_DESCRIPTION_MA, \"invalid String merger input\"\n/* INVALID_STRING_MERGER_PARAMETER */\n, 'Input for String merger is invalid, contact support team to resolve.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"already initialized\"\n/* ALREADY_INITIALIZED */\n, 'initializePerformance() has already been called with ' + 'different options. To avoid this error, call initializePerformance() with the ' + 'same options as when it was originally called, or call getPerformance() to return the' + ' already initialized instance.'), _ERROR_DESCRIPTION_MA);\nvar ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar apiInstance;\nvar windowInstance;\n/**\r\n * This class holds a reference to various browser related objects injected by\r\n * set methods.\r\n */\n\nvar Api = /*#__PURE__*/function () {\n  function Api(window) {\n    _classCallCheck(this, Api);\n\n    this.window = window;\n\n    if (!window) {\n      throw ERROR_FACTORY.create(\"no window\"\n      /* NO_WINDOW */\n      );\n    }\n\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n\n  _createClass(Api, [{\n    key: \"getUrl\",\n    value: function getUrl() {\n      // Do not capture the string query part of url.\n      return this.windowLocation.href.split('?')[0];\n    }\n  }, {\n    key: \"mark\",\n    value: function mark(name) {\n      if (!this.performance || !this.performance.mark) {\n        return;\n      }\n\n      this.performance.mark(name);\n    }\n  }, {\n    key: \"measure\",\n    value: function measure(measureName, mark1, mark2) {\n      if (!this.performance || !this.performance.measure) {\n        return;\n      }\n\n      this.performance.measure(measureName, mark1, mark2);\n    }\n  }, {\n    key: \"getEntriesByType\",\n    value: function getEntriesByType(type) {\n      if (!this.performance || !this.performance.getEntriesByType) {\n        return [];\n      }\n\n      return this.performance.getEntriesByType(type);\n    }\n  }, {\n    key: \"getEntriesByName\",\n    value: function getEntriesByName(name) {\n      if (!this.performance || !this.performance.getEntriesByName) {\n        return [];\n      }\n\n      return this.performance.getEntriesByName(name);\n    }\n  }, {\n    key: \"getTimeOrigin\",\n    value: function getTimeOrigin() {\n      // Polyfill the time origin with performance.timing.navigationStart.\n      return this.performance && (this.performance.timeOrigin || this.performance.timing.navigationStart);\n    }\n  }, {\n    key: \"requiredApisAvailable\",\n    value: function requiredApisAvailable() {\n      if (!fetch || !Promise || !areCookiesEnabled()) {\n        consoleLogger.info('Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.');\n        return false;\n      }\n\n      if (!isIndexedDBAvailable()) {\n        consoleLogger.info('IndexedDB is not supported by current browswer');\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"setupObserver\",\n    value: function setupObserver(entryType, callback) {\n      if (!this.PerformanceObserver) {\n        return;\n      }\n\n      var observer = new this.PerformanceObserver(function (list) {\n        var _iterator = _createForOfIteratorHelper(list.getEntries()),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var entry = _step.value;\n            // `entry` is a PerformanceEntry instance.\n            callback(entry);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }); // Start observing the entry types you care about.\n\n      observer.observe({\n        entryTypes: [entryType]\n      });\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (apiInstance === undefined) {\n        apiInstance = new Api(windowInstance);\n      }\n\n      return apiInstance;\n    }\n  }]);\n\n  return Api;\n}();\n\nfunction setupApi(window) {\n  windowInstance = window;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar iid;\n\nfunction getIidPromise(installationsService) {\n  var iidPromise = installationsService.getId(); // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n  iidPromise.then(function (iidVal) {\n    iid = iidVal;\n  });\n  return iidPromise;\n} // This method should be used after the iid is retrieved by getIidPromise method.\n\n\nfunction getIid() {\n  return iid;\n}\n\nfunction getAuthTokenPromise(installationsService) {\n  var authTokenPromise = installationsService.getToken(); // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n  authTokenPromise.then(function (authTokenVal) {});\n  return authTokenPromise;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction mergeStrings(part1, part2) {\n  var sizeDiff = part1.length - part2.length;\n\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(\"invalid String merger input\"\n    /* INVALID_STRING_MERGER_PARAMETER */\n    );\n  }\n\n  var resultArray = [];\n\n  for (var i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar settingsServiceInstance;\n\nvar SettingsService = /*#__PURE__*/function () {\n  function SettingsService() {\n    _classCallCheck(this, SettingsService);\n\n    // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n    this.instrumentationEnabled = true; // The variable which controls logging of custom traces.\n\n    this.dataCollectionEnabled = true; // Configuration flags set through remote config.\n\n    this.loggingEnabled = false; // Sampling rate between 0 and 1.\n\n    this.tracesSamplingRate = 1;\n    this.networkRequestsSamplingRate = 1; // Address of logging service.\n\n    this.logEndPointUrl = 'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto'; // Performance event transport endpoint URL which should be compatible with proto3.\n    // New Address for transport service, not configurable via Remote Config.\n\n    this.flTransportEndpointUrl = mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');\n    this.transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV'); // Source type for performance event logs.\n\n    this.logSource = 462; // Flags which control per session logging of traces and network requests.\n\n    this.logTraceAfterSampling = false;\n    this.logNetworkAfterSampling = false; // TTL of config retrieved from remote config in hours.\n\n    this.configTimeToLive = 12;\n  }\n\n  _createClass(SettingsService, [{\n    key: \"getFlTransportFullUrl\",\n    value: function getFlTransportFullUrl() {\n      return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (settingsServiceInstance === undefined) {\n        settingsServiceInstance = new SettingsService();\n      }\n\n      return settingsServiceInstance;\n    }\n  }]);\n\n  return SettingsService;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar VisibilityState;\n\n(function (VisibilityState) {\n  VisibilityState[VisibilityState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  VisibilityState[VisibilityState[\"VISIBLE\"] = 1] = \"VISIBLE\";\n  VisibilityState[VisibilityState[\"HIDDEN\"] = 2] = \"HIDDEN\";\n})(VisibilityState || (VisibilityState = {}));\n\nvar RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nvar ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nvar MAX_ATTRIBUTE_NAME_LENGTH = 40;\nvar MAX_ATTRIBUTE_VALUE_LENGTH = 100;\n\nfunction getServiceWorkerStatus() {\n  var navigator = Api.getInstance().navigator;\n\n  if ('serviceWorker' in navigator) {\n    if (navigator.serviceWorker.controller) {\n      return 2\n      /* CONTROLLED */\n      ;\n    } else {\n      return 3\n      /* UNCONTROLLED */\n      ;\n    }\n  } else {\n    return 1\n    /* UNSUPPORTED */\n    ;\n  }\n}\n\nfunction getVisibilityState() {\n  var document = Api.getInstance().document;\n  var visibilityState = document.visibilityState;\n\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nfunction getEffectiveConnectionType() {\n  var navigator = Api.getInstance().navigator;\n  var navigatorConnection = navigator.connection;\n  var effectiveType = navigatorConnection && navigatorConnection.effectiveType;\n\n  switch (effectiveType) {\n    case 'slow-2g':\n      return 1\n      /* CONNECTION_SLOW_2G */\n      ;\n\n    case '2g':\n      return 2\n      /* CONNECTION_2G */\n      ;\n\n    case '3g':\n      return 3\n      /* CONNECTION_3G */\n      ;\n\n    case '4g':\n      return 4\n      /* CONNECTION_4G */\n      ;\n\n    default:\n      return 0\n      /* UNKNOWN */\n      ;\n  }\n}\n\nfunction isValidCustomAttributeName(name) {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n\n  var matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(function (prefix) {\n    return name.startsWith(prefix);\n  });\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\n\nfunction isValidCustomAttributeValue(value) {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getAppId(firebaseApp) {\n  var _a;\n\n  var appId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.appId;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(\"no app id\"\n    /* NO_APP_ID */\n    );\n  }\n\n  return appId;\n}\n\nfunction getProjectId(firebaseApp) {\n  var _a;\n\n  var projectId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.projectId;\n\n  if (!projectId) {\n    throw ERROR_FACTORY.create(\"no project id\"\n    /* NO_PROJECT_ID */\n    );\n  }\n\n  return projectId;\n}\n\nfunction getApiKey(firebaseApp) {\n  var _a;\n\n  var apiKey = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.apiKey;\n\n  if (!apiKey) {\n    throw ERROR_FACTORY.create(\"no api key\"\n    /* NO_API_KEY */\n    );\n  }\n\n  return apiKey;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar REMOTE_CONFIG_SDK_VERSION = '0.0.1'; // These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\n\nvar DEFAULT_CONFIGS = {\n  loggingEnabled: true\n};\nvar FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nfunction getConfig(performanceController, iid) {\n  var config = getStoredConfig();\n\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(performanceController, iid).then(processConfig).then(function (config) {\n    return storeConfig(config);\n  },\n  /** Do nothing for error, use defaults set in settings service. */\n  function () {});\n}\n\nfunction getStoredConfig() {\n  var localStorage = Api.getInstance().localStorage;\n\n  if (!localStorage) {\n    return;\n  }\n\n  var expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  var configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n\n  if (!configStringified) {\n    return;\n  }\n\n  try {\n    var configResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch (_a) {\n    return;\n  }\n}\n\nfunction storeConfig(config) {\n  var localStorage = Api.getInstance().localStorage;\n\n  if (!config || !localStorage) {\n    return;\n  }\n\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() + SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000));\n}\n\nvar COULD_NOT_GET_CONFIG_MSG = 'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(performanceController, iid) {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise(performanceController.installations).then(function (authToken) {\n    var projectId = getProjectId(performanceController.app);\n    var apiKey = getApiKey(performanceController.app);\n    var configEndPoint = \"https://firebaseremoteconfig.googleapis.com/v1/projects/\".concat(projectId, \"/namespaces/fireperf:fetch?key=\").concat(apiKey);\n    var request = new Request(configEndPoint, {\n      method: 'POST',\n      headers: {\n        Authorization: \"\".concat(FIS_AUTH_PREFIX, \" \").concat(authToken)\n      },\n\n      /* eslint-disable camelcase */\n      body: JSON.stringify({\n        app_instance_id: iid,\n        app_instance_id_token: authToken,\n        app_id: getAppId(performanceController.app),\n        app_version: SDK_VERSION,\n        sdk_version: REMOTE_CONFIG_SDK_VERSION\n      })\n      /* eslint-enable camelcase */\n\n    });\n    return fetch(request).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      } // In case response is not ok. This will be caught by catch.\n\n\n      throw ERROR_FACTORY.create(\"RC response not ok\"\n      /* RC_NOT_OK */\n      );\n    });\n  }).catch(function () {\n    consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n    return undefined;\n  });\n}\n/**\r\n * Processes config coming either from calling RC or from local storage.\r\n * This method only runs if call is successful or config in storage\r\n * is valid.\r\n */\n\n\nfunction processConfig(config) {\n  if (!config) {\n    return config;\n  }\n\n  var settingsServiceInstance = SettingsService.getInstance();\n  var entries = config.entries || {};\n\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled = String(entries.fpr_enabled) === 'true';\n  } else {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  }\n\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } // Key from Remote Config has to be non-empty string, otherwsie use local value.\n\n\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  }\n\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);\n  }\n\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);\n  } // Set the per session trace and network logging flags.\n\n\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance.tracesSamplingRate);\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance.networkRequestsSamplingRate);\n  return config;\n}\n\nfunction configValid(expiry) {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate) {\n  return Math.random() <= samplingRate;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar initializationStatus = 1\n/* notInitialized */\n;\nvar initializationPromise;\n\nfunction getInitializationPromise(performanceController) {\n  initializationStatus = 2\n  /* initializationPending */\n  ;\n  initializationPromise = initializationPromise || initializePerf(performanceController);\n  return initializationPromise;\n}\n\nfunction isPerfInitialized() {\n  return initializationStatus === 3\n  /* initialized */\n  ;\n}\n\nfunction initializePerf(performanceController) {\n  return getDocumentReadyComplete().then(function () {\n    return getIidPromise(performanceController.installations);\n  }).then(function (iid) {\n    return getConfig(performanceController, iid);\n  }).then(function () {\n    return changeInitializationStatus();\n  }, function () {\n    return changeInitializationStatus();\n  });\n}\n/**\r\n * Returns a promise which resolves whenever the document readystate is complete or\r\n * immediately if it is called after page load complete.\r\n */\n\n\nfunction getDocumentReadyComplete() {\n  var document = Api.getInstance().document;\n  return new Promise(function (resolve) {\n    if (document && document.readyState !== 'complete') {\n      var handler = function handler() {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus() {\n  initializationStatus = 3\n  /* initialized */\n  ;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nvar INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000; // If end point does not work, the call will be tried for these many times.\n\nvar DEFAULT_REMAINING_TRIES = 3;\nvar MAX_EVENT_COUNT_PER_REQUEST = 1000;\nvar remainingTries = DEFAULT_REMAINING_TRIES;\n/* eslint-enable camelcase */\n\nvar queue = [];\nvar isTransportSetup = false;\n\nfunction setupTransportService() {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\n\nfunction processQueue(timeOffset) {\n  setTimeout(function () {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    } // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n\n\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n\n    dispatchQueueEvents();\n  }, timeOffset);\n}\n\nfunction dispatchQueueEvents() {\n  // Extract events up to the maximum cap of single logRequest from top of \"official queue\".\n  // The staged events will be used for current logRequest attempt, remaining events will be kept\n  // for next attempt.\n  var staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n\n  var log_event = staged.map(function (evt) {\n    return {\n      source_extension_json_proto3: evt.message,\n      event_time_ms: String(evt.eventTime)\n    };\n  });\n  var data = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1,\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event: log_event\n  };\n  /* eslint-enable camelcase */\n\n  sendEventsToFl(data, staged).catch(function () {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = [].concat(_toConsumableArray(staged), _toConsumableArray(queue));\n    remainingTries--;\n    consoleLogger.info(\"Tries left: \".concat(remainingTries, \".\"));\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\n\nfunction sendEventsToFl(data, staged) {\n  return postToFlEndpoint(data).then(function (res) {\n    if (!res.ok) {\n      consoleLogger.info('Call to Firebase backend failed.');\n    }\n\n    return res.json();\n  }).then(function (res) {\n    // Find the next call wait time from the response.\n    var transportWait = Number(res.nextRequestWaitMillis);\n    var requestOffset = DEFAULT_SEND_INTERVAL_MS;\n\n    if (!isNaN(transportWait)) {\n      requestOffset = Math.max(transportWait, requestOffset);\n    } // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n    // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n\n\n    var logResponseDetails = res.logResponseDetails;\n\n    if (Array.isArray(logResponseDetails) && logResponseDetails.length > 0 && logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER') {\n      queue = [].concat(_toConsumableArray(staged), _toConsumableArray(queue));\n      consoleLogger.info(\"Retry transport request later.\");\n    }\n\n    remainingTries = DEFAULT_REMAINING_TRIES; // Schedule the next process.\n\n    processQueue(requestOffset);\n  });\n}\n\nfunction postToFlEndpoint(data) {\n  var flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\n\nfunction addToQueue(evt) {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(\"invalid cc log\"\n    /* INVALID_CC_LOG */\n    );\n  } // Add the new event to the queue.\n\n\n  queue = [].concat(_toConsumableArray(queue), [evt]);\n}\n/** Log handler for cc service to send the performance logs to the server. */\n\n\nfunction transportHandler( // eslint-disable-next-line @typescript-eslint/no-explicit-any\nserializer) {\n  return function () {\n    var message = serializer.apply(void 0, arguments);\n    addToQueue({\n      message: message,\n      eventTime: Date.now()\n    });\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/* eslint-enble camelcase */\n\n\nvar logger; // This method is not called before initialization.\n\nfunction sendLog(resource, resourceType) {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n\n  logger(resource, resourceType);\n}\n\nfunction logTrace(trace) {\n  var settingsService = SettingsService.getInstance(); // Do not log if trace is auto generated and instrumentation is disabled.\n\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  } // Do not log if trace is custom and data collection is disabled.\n\n\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  } // Do not log if required apis are not available.\n\n\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  } // Only log the page load auto traces if page is visible.\n\n\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n    getInitializationPromise(trace.performanceController).then(function () {\n      return sendTraceLog(trace);\n    }, function () {\n      return sendTraceLog(trace);\n    });\n  }\n}\n\nfunction sendTraceLog(trace) {\n  if (!getIid()) {\n    return;\n  }\n\n  var settingsService = SettingsService.getInstance();\n\n  if (!settingsService.loggingEnabled || !settingsService.logTraceAfterSampling) {\n    return;\n  }\n\n  setTimeout(function () {\n    return sendLog(trace, 1\n    /* Trace */\n    );\n  }, 0);\n}\n\nfunction logNetworkRequest(networkRequest) {\n  var settingsService = SettingsService.getInstance(); // Do not log network requests if instrumentation is disabled.\n\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  } // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n\n\n  var networkRequestUrl = networkRequest.url; // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n\n  var logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  var flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n\n  if (networkRequestUrl === logEndpointUrl || networkRequestUrl === flEndpointUrl) {\n    return;\n  }\n\n  if (!settingsService.loggingEnabled || !settingsService.logNetworkAfterSampling) {\n    return;\n  }\n\n  setTimeout(function () {\n    return sendLog(networkRequest, 0\n    /* NetworkRequest */\n    );\n  }, 0);\n}\n\nfunction serializer(resource, resourceType) {\n  if (resourceType === 0\n  /* NetworkRequest */\n  ) {\n    return serializeNetworkRequest(resource);\n  }\n\n  return serializeTrace(resource);\n}\n\nfunction serializeNetworkRequest(networkRequest) {\n  var networkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  var perfMetric = {\n    application_info: getApplicationInfo(networkRequest.performanceController.app),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace) {\n  var traceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n\n  var customAttributes = trace.getAttributes();\n\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n\n  var perfMetric = {\n    application_info: getApplicationInfo(trace.performanceController.app),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo(firebaseApp) {\n  return {\n    google_app_id: getAppId(firebaseApp),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar MAX_METRIC_NAME_LENGTH = 100;\nvar RESERVED_AUTO_PREFIX = '_';\nvar oobMetrics = [FIRST_PAINT_COUNTER_NAME, FIRST_CONTENTFUL_PAINT_COUNTER_NAME, FIRST_INPUT_DELAY_COUNTER_NAME];\n/**\r\n * Returns true if the metric is custom and does not start with reserved prefix, or if\r\n * the metric is one of out of the box page load trace metrics.\r\n */\n\nfunction isValidMetricName(name, traceName) {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n\n  return traceName && traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) && oobMetrics.indexOf(name) > -1 || !name.startsWith(RESERVED_AUTO_PREFIX);\n}\n/**\r\n * Converts the provided value to an integer value to be used in case of a metric.\r\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\r\n *\r\n * @returns Converted integer number to be set for the metric.\r\n */\n\n\nfunction convertMetricValueToInteger(providedValue) {\n  var valueAsInteger = Math.floor(providedValue);\n\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(\"Metric value should be an Integer, setting the value as : \".concat(valueAsInteger, \".\"));\n  }\n\n  return valueAsInteger;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Trace = /*#__PURE__*/function () {\n  /**\r\n   * @param performanceController The performance controller running.\r\n   * @param name The name of the trace.\r\n   * @param isAuto If the trace is auto-instrumented.\r\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\r\n   * is only set when the trace is built for logging when the user directly uses the user timing\r\n   * api (performance.mark and performance.measure).\r\n   */\n  function Trace(performanceController, name) {\n    var isAuto = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var traceMeasureName = arguments.length > 3 ? arguments[3] : undefined;\n\n    _classCallCheck(this, Trace);\n\n    this.performanceController = performanceController;\n    this.name = name;\n    this.isAuto = isAuto;\n    this.state = 1\n    /* UNINITIALIZED */\n    ;\n    this.customAttributes = {};\n    this.counters = {};\n    this.api = Api.getInstance();\n    this.randomId = Math.floor(Math.random() * 1000000);\n\n    if (!this.isAuto) {\n      this.traceStartMark = \"\".concat(TRACE_START_MARK_PREFIX, \"-\").concat(this.randomId, \"-\").concat(this.name);\n      this.traceStopMark = \"\".concat(TRACE_STOP_MARK_PREFIX, \"-\").concat(this.randomId, \"-\").concat(this.name);\n      this.traceMeasure = traceMeasureName || \"\".concat(TRACE_MEASURE_PREFIX, \"-\").concat(this.randomId, \"-\").concat(this.name);\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n  /**\r\n   * Starts a trace. The measurement of the duration starts at this point.\r\n   */\n\n\n  _createClass(Trace, [{\n    key: \"start\",\n    value: function start() {\n      if (this.state !== 1\n      /* UNINITIALIZED */\n      ) {\n        throw ERROR_FACTORY.create(\"trace started\"\n        /* TRACE_STARTED_BEFORE */\n        , {\n          traceName: this.name\n        });\n      }\n\n      this.api.mark(this.traceStartMark);\n      this.state = 2\n      /* RUNNING */\n      ;\n    }\n    /**\r\n     * Stops the trace. The measurement of the duration of the trace stops at this point and trace\r\n     * is logged.\r\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.state !== 2\n      /* RUNNING */\n      ) {\n        throw ERROR_FACTORY.create(\"trace stopped\"\n        /* TRACE_STOPPED_BEFORE */\n        , {\n          traceName: this.name\n        });\n      }\n\n      this.state = 3\n      /* TERMINATED */\n      ;\n      this.api.mark(this.traceStopMark);\n      this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);\n      this.calculateTraceMetrics();\n      logTrace(this);\n    }\n    /**\r\n     * Records a trace with predetermined values. If this method is used a trace is created and logged\r\n     * directly. No need to use start and stop methods.\r\n     * @param startTime Trace start time since epoch in millisec\r\n     * @param duration The duraction of the trace in millisec\r\n     * @param options An object which can optionally hold maps of custom metrics and custom attributes\r\n     */\n\n  }, {\n    key: \"record\",\n    value: function record(startTime, duration, options) {\n      if (startTime <= 0) {\n        throw ERROR_FACTORY.create(\"nonpositive trace startTime\"\n        /* NONPOSITIVE_TRACE_START_TIME */\n        , {\n          traceName: this.name\n        });\n      }\n\n      if (duration <= 0) {\n        throw ERROR_FACTORY.create(\"nonpositive trace duration\"\n        /* NONPOSITIVE_TRACE_DURATION */\n        , {\n          traceName: this.name\n        });\n      }\n\n      this.durationUs = Math.floor(duration * 1000);\n      this.startTimeUs = Math.floor(startTime * 1000);\n\n      if (options && options.attributes) {\n        this.customAttributes = Object.assign({}, options.attributes);\n      }\n\n      if (options && options.metrics) {\n        for (var _i = 0, _Object$keys = Object.keys(options.metrics); _i < _Object$keys.length; _i++) {\n          var metricName = _Object$keys[_i];\n\n          if (!isNaN(Number(options.metrics[metricName]))) {\n            this.counters[metricName] = Math.floor(Number(options.metrics[metricName]));\n          }\n        }\n      }\n\n      logTrace(this);\n    }\n    /**\r\n     * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\r\n     * custom metric if one with the given name does not exist. The value will be floored down to an\r\n     * integer.\r\n     * @param counter Name of the custom metric\r\n     * @param numAsInteger Increment by value\r\n     */\n\n  }, {\n    key: \"incrementMetric\",\n    value: function incrementMetric(counter) {\n      var numAsInteger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n      if (this.counters[counter] === undefined) {\n        this.putMetric(counter, numAsInteger);\n      } else {\n        this.putMetric(counter, this.counters[counter] + numAsInteger);\n      }\n    }\n    /**\r\n     * Sets a custom metric to a specified value. Will create a new custom metric if one with the\r\n     * given name does not exist. The value will be floored down to an integer.\r\n     * @param counter Name of the custom metric\r\n     * @param numAsInteger Set custom metric to this value\r\n     */\n\n  }, {\n    key: \"putMetric\",\n    value: function putMetric(counter, numAsInteger) {\n      if (isValidMetricName(counter, this.name)) {\n        this.counters[counter] = convertMetricValueToInteger(numAsInteger !== null && numAsInteger !== void 0 ? numAsInteger : 0);\n      } else {\n        throw ERROR_FACTORY.create(\"invalid custom metric name\"\n        /* INVALID_CUSTOM_METRIC_NAME */\n        , {\n          customMetricName: counter\n        });\n      }\n    }\n    /**\r\n     * Returns the value of the custom metric by that name. If a custom metric with that name does\r\n     * not exist will return zero.\r\n     * @param counter\r\n     */\n\n  }, {\n    key: \"getMetric\",\n    value: function getMetric(counter) {\n      return this.counters[counter] || 0;\n    }\n    /**\r\n     * Sets a custom attribute of a trace to a certain value.\r\n     * @param attr\r\n     * @param value\r\n     */\n\n  }, {\n    key: \"putAttribute\",\n    value: function putAttribute(attr, value) {\n      var isValidName = isValidCustomAttributeName(attr);\n      var isValidValue = isValidCustomAttributeValue(value);\n\n      if (isValidName && isValidValue) {\n        this.customAttributes[attr] = value;\n        return;\n      } // Throw appropriate error when the attribute name or value is invalid.\n\n\n      if (!isValidName) {\n        throw ERROR_FACTORY.create(\"invalid attribute name\"\n        /* INVALID_ATTRIBUTE_NAME */\n        , {\n          attributeName: attr\n        });\n      }\n\n      if (!isValidValue) {\n        throw ERROR_FACTORY.create(\"invalid attribute value\"\n        /* INVALID_ATTRIBUTE_VALUE */\n        , {\n          attributeValue: value\n        });\n      }\n    }\n    /**\r\n     * Retrieves the value a custom attribute of a trace is set to.\r\n     * @param attr\r\n     */\n\n  }, {\n    key: \"getAttribute\",\n    value: function getAttribute(attr) {\n      return this.customAttributes[attr];\n    }\n  }, {\n    key: \"removeAttribute\",\n    value: function removeAttribute(attr) {\n      if (this.customAttributes[attr] === undefined) {\n        return;\n      }\n\n      delete this.customAttributes[attr];\n    }\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes() {\n      return Object.assign({}, this.customAttributes);\n    }\n  }, {\n    key: \"setStartTime\",\n    value: function setStartTime(startTime) {\n      this.startTimeUs = startTime;\n    }\n  }, {\n    key: \"setDuration\",\n    value: function setDuration(duration) {\n      this.durationUs = duration;\n    }\n    /**\r\n     * Calculates and assigns the duration and start time of the trace using the measure performance\r\n     * entry.\r\n     */\n\n  }, {\n    key: \"calculateTraceMetrics\",\n    value: function calculateTraceMetrics() {\n      var perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n      var perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n\n      if (perfMeasureEntry) {\n        this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n        this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000);\n      }\n    }\n    /**\r\n     * @param navigationTimings A single element array which contains the navigationTIming object of\r\n     * the page load\r\n     * @param paintTimings A array which contains paintTiming object of the page load\r\n     * @param firstInputDelay First input delay in millisec\r\n     */\n\n  }], [{\n    key: \"createOobTrace\",\n    value: function createOobTrace(performanceController, navigationTimings, paintTimings, firstInputDelay) {\n      var route = Api.getInstance().getUrl();\n\n      if (!route) {\n        return;\n      }\n\n      var trace = new Trace(performanceController, OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\n      var timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n      trace.setStartTime(timeOriginUs); // navigationTimings includes only one element.\n\n      if (navigationTimings && navigationTimings[0]) {\n        trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n        trace.putMetric('domInteractive', Math.floor(navigationTimings[0].domInteractive * 1000));\n        trace.putMetric('domContentLoadedEventEnd', Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000));\n        trace.putMetric('loadEventEnd', Math.floor(navigationTimings[0].loadEventEnd * 1000));\n      }\n\n      var FIRST_PAINT = 'first-paint';\n      var FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n\n      if (paintTimings) {\n        var firstPaint = paintTimings.find(function (paintObject) {\n          return paintObject.name === FIRST_PAINT;\n        });\n\n        if (firstPaint && firstPaint.startTime) {\n          trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1000));\n        }\n\n        var firstContentfulPaint = paintTimings.find(function (paintObject) {\n          return paintObject.name === FIRST_CONTENTFUL_PAINT;\n        });\n\n        if (firstContentfulPaint && firstContentfulPaint.startTime) {\n          trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1000));\n        }\n\n        if (firstInputDelay) {\n          trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1000));\n        }\n      }\n\n      logTrace(trace);\n    }\n  }, {\n    key: \"createUserTimingTrace\",\n    value: function createUserTimingTrace(performanceController, measureName) {\n      var trace = new Trace(performanceController, measureName, false, measureName);\n      logTrace(trace);\n    }\n  }]);\n\n  return Trace;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction createNetworkRequestEntry(performanceController, entry) {\n  var performanceEntry = entry;\n\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n\n  var timeOrigin = Api.getInstance().getTimeOrigin();\n  var startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1000);\n  var timeToResponseInitiatedUs = performanceEntry.responseStart ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1000) : undefined;\n  var timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1000); // Remove the query params from logged network request url.\n\n  var url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  var networkRequest = {\n    performanceController: performanceController,\n    url: url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs: startTimeUs,\n    timeToResponseInitiatedUs: timeToResponseInitiatedUs,\n    timeToResponseCompletedUs: timeToResponseCompletedUs\n  };\n  logNetworkRequest(networkRequest);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar FID_WAIT_TIME_MS = 5000;\n\nfunction setupOobResources(performanceController) {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  } // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n\n\n  setTimeout(function () {\n    return setupOobTraces(performanceController);\n  }, 0);\n  setTimeout(function () {\n    return setupNetworkRequests(performanceController);\n  }, 0);\n  setTimeout(function () {\n    return setupUserTimingTraces(performanceController);\n  }, 0);\n}\n\nfunction setupNetworkRequests(performanceController) {\n  var api = Api.getInstance();\n  var resources = api.getEntriesByType('resource');\n\n  var _iterator2 = _createForOfIteratorHelper(resources),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var resource = _step2.value;\n      createNetworkRequestEntry(performanceController, resource);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  api.setupObserver('resource', function (entry) {\n    return createNetworkRequestEntry(performanceController, entry);\n  });\n}\n\nfunction setupOobTraces(performanceController) {\n  var api = Api.getInstance();\n  var navigationTimings = api.getEntriesByType('navigation');\n  var paintTimings = api.getEntriesByType('paint'); // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var timeoutId = setTimeout(function () {\n      Trace.createOobTrace(performanceController, navigationTimings, paintTimings);\n      timeoutId = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay(function (fid) {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        Trace.createOobTrace(performanceController, navigationTimings, paintTimings, fid);\n      }\n    });\n  } else {\n    Trace.createOobTrace(performanceController, navigationTimings, paintTimings);\n  }\n}\n\nfunction setupUserTimingTraces(performanceController) {\n  var api = Api.getInstance(); // Run through the measure performance entries collected up to this point.\n\n  var measures = api.getEntriesByType('measure');\n\n  var _iterator3 = _createForOfIteratorHelper(measures),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var measure = _step3.value;\n      createUserTimingTrace(performanceController, measure);\n    } // Setup an observer to capture the measures from this point on.\n\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  api.setupObserver('measure', function (entry) {\n    return createUserTimingTrace(performanceController, entry);\n  });\n}\n\nfunction createUserTimingTrace(performanceController, measure) {\n  var measureName = measure.name; // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n\n  if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) === TRACE_MEASURE_PREFIX) {\n    return;\n  }\n\n  Trace.createUserTimingTrace(performanceController, measureName);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar PerformanceController = /*#__PURE__*/function () {\n  function PerformanceController(app, installations) {\n    _classCallCheck(this, PerformanceController);\n\n    this.app = app;\n    this.installations = installations;\n    this.initialized = false;\n  }\n  /**\r\n   * This method *must* be called internally as part of creating a\r\n   * PerformanceController instance.\r\n   *\r\n   * Currently it's not possible to pass the settings object through the\r\n   * constructor using Components, so this method exists to be called with the\r\n   * desired settings, to ensure nothing is collected without the user's\r\n   * consent.\r\n   */\n\n\n  _createClass(PerformanceController, [{\n    key: \"_init\",\n    value: function _init(settings) {\n      var _this = this;\n\n      if (this.initialized) {\n        return;\n      }\n\n      if ((settings === null || settings === void 0 ? void 0 : settings.dataCollectionEnabled) !== undefined) {\n        this.dataCollectionEnabled = settings.dataCollectionEnabled;\n      }\n\n      if ((settings === null || settings === void 0 ? void 0 : settings.instrumentationEnabled) !== undefined) {\n        this.instrumentationEnabled = settings.instrumentationEnabled;\n      }\n\n      if (Api.getInstance().requiredApisAvailable()) {\n        validateIndexedDBOpenable().then(function (isAvailable) {\n          if (isAvailable) {\n            setupTransportService();\n            getInitializationPromise(_this).then(function () {\n              return setupOobResources(_this);\n            }, function () {\n              return setupOobResources(_this);\n            });\n            _this.initialized = true;\n          }\n        }).catch(function (error) {\n          consoleLogger.info(\"Environment doesn't support IndexedDB: \".concat(error));\n        });\n      } else {\n        consoleLogger.info('Firebase Performance cannot start if the browser does not support ' + '\"Fetch\" and \"Promise\", or cookies are disabled.');\n      }\n    }\n  }, {\n    key: \"instrumentationEnabled\",\n    get: function get() {\n      return SettingsService.getInstance().instrumentationEnabled;\n    },\n    set: function set(val) {\n      SettingsService.getInstance().instrumentationEnabled = val;\n    }\n  }, {\n    key: \"dataCollectionEnabled\",\n    get: function get() {\n      return SettingsService.getInstance().dataCollectionEnabled;\n    },\n    set: function set(val) {\n      SettingsService.getInstance().dataCollectionEnabled = val;\n    }\n  }]);\n\n  return PerformanceController;\n}();\n/**\r\n * Firebase Performance Monitoring\r\n *\r\n * @packageDocumentation\r\n */\n\n\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n/**\r\n * Returns a {@link FirebasePerformance} instance for the given app.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @public\r\n */\n\nfunction getPerformance() {\n  var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  app = getModularInstance(app);\n\n  var provider = _getProvider(app, 'performance');\n\n  var perfInstance = provider.getImmediate();\n  return perfInstance;\n}\n/**\r\n * Returns a {@link FirebasePerformance} instance for the given app. Can only be called once.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @param settings - Optional settings for the {@link FirebasePerformance} instance.\r\n * @public\r\n */\n\n\nfunction initializePerformance(app, settings) {\n  app = getModularInstance(app);\n\n  var provider = _getProvider(app, 'performance'); // throw if an instance was already created.\n  // It could happen if initializePerformance() is called more than once, or getPerformance() is called first.\n\n\n  if (provider.isInitialized()) {\n    var existingInstance = provider.getImmediate();\n    var initialSettings = provider.getOptions();\n\n    if (deepEqual(initialSettings, settings !== null && settings !== void 0 ? settings : {})) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already initialized\"\n      /* ALREADY_INITIALIZED */\n      );\n    }\n  }\n\n  var perfInstance = provider.initialize({\n    options: settings\n  });\n  return perfInstance;\n}\n/**\r\n * Returns a new `PerformanceTrace` instance.\r\n * @param performance - The {@link FirebasePerformance} instance to use.\r\n * @param name - The name of the trace.\r\n * @public\r\n */\n\n\nfunction trace(performance, name) {\n  performance = getModularInstance(performance);\n  return new Trace(performance, name);\n}\n\nvar factory = function factory(container, _ref) {\n  var settings = _ref.options;\n  // Dependencies\n  var app = container.getProvider('app').getImmediate();\n  var installations = container.getProvider('installations-internal').getImmediate();\n\n  if (app.name !== DEFAULT_ENTRY_NAME) {\n    throw ERROR_FACTORY.create(\"FB not default\"\n    /* FB_NOT_DEFAULT */\n    );\n  }\n\n  if (typeof window === 'undefined') {\n    throw ERROR_FACTORY.create(\"no window\"\n    /* NO_WINDOW */\n    );\n  }\n\n  setupApi(window);\n  var perfInstance = new PerformanceController(app, installations);\n\n  perfInstance._init(settings);\n\n  return perfInstance;\n};\n\nfunction registerPerformance() {\n  _registerComponent(new Component('performance', factory, \"PUBLIC\"\n  /* PUBLIC */\n  ));\n\n  registerVersion(name, version); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n}\n\nregisterPerformance();\nexport { getPerformance, initializePerformance, trace };","map":{"version":3,"mappings":"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","names":["SDK_VERSION","version","TRACE_START_MARK_PREFIX","TRACE_STOP_MARK_PREFIX","TRACE_MEASURE_PREFIX","OOB_TRACE_PAGE_LOAD_PREFIX","FIRST_PAINT_COUNTER_NAME","FIRST_CONTENTFUL_PAINT_COUNTER_NAME","FIRST_INPUT_DELAY_COUNTER_NAME","CONFIG_LOCAL_STORAGE_KEY","CONFIG_EXPIRY_LOCAL_STORAGE_KEY","SERVICE","SERVICE_NAME","ERROR_DESCRIPTION_MAP","ERROR_FACTORY","ErrorFactory","consoleLogger","Logger","logLevel","LogLevel","INFO","apiInstance","windowInstance","Api","window","create","performance","PerformanceObserver","windowLocation","location","navigator","document","cookieEnabled","localStorage","perfMetrics","onFirstInputDelay","href","split","name","mark","measureName","mark1","mark2","measure","type","getEntriesByType","getEntriesByName","timeOrigin","timing","navigationStart","fetch","Promise","areCookiesEnabled","info","isIndexedDBAvailable","entryType","callback","observer","list","getEntries","entry","observe","entryTypes","undefined","setupApi","iid","getIidPromise","installationsService","iidPromise","getId","then","iidVal","getIid","getAuthTokenPromise","authTokenPromise","getToken","authTokenVal","mergeStrings","part1","part2","sizeDiff","length","resultArray","i","push","charAt","join","settingsServiceInstance","SettingsService","flTransportEndpointUrl","concat","transportKey","VisibilityState","RESERVED_ATTRIBUTE_PREFIXES","ATTRIBUTE_FORMAT_REGEX","RegExp","MAX_ATTRIBUTE_NAME_LENGTH","MAX_ATTRIBUTE_VALUE_LENGTH","getServiceWorkerStatus","getInstance","serviceWorker","controller","getVisibilityState","visibilityState","VISIBLE","HIDDEN","UNKNOWN","getEffectiveConnectionType","navigatorConnection","connection","effectiveType","isValidCustomAttributeName","matchesReservedPrefix","some","startsWith","prefix","match","isValidCustomAttributeValue","value","getAppId","firebaseApp","appId","options","_a","getProjectId","projectId","getApiKey","apiKey","REMOTE_CONFIG_SDK_VERSION","DEFAULT_CONFIGS","loggingEnabled","FIS_AUTH_PREFIX","getConfig","performanceController","config","getStoredConfig","processConfig","resolve","getRemoteConfig","storeConfig","expiryString","getItem","configValid","configStringified","configResponse","JSON","parse","setItem","stringify","String","Date","now","configTimeToLive","COULD_NOT_GET_CONFIG_MSG","installations","app","configEndPoint","request","Request","method","headers","Authorization","authToken","body","app_instance_id","app_instance_id_token","app_id","app_version","sdk_version","response","ok","json","catch","entries","fpr_enabled","fpr_log_source","logSource","Number","fpr_log_endpoint_url","logEndPointUrl","fpr_log_transport_key","fpr_vc_network_request_sampling_rate","networkRequestsSamplingRate","fpr_vc_trace_sampling_rate","tracesSamplingRate","logTraceAfterSampling","shouldLogAfterSampling","logNetworkAfterSampling","expiry","samplingRate","Math","random","initializationStatus","initializationPromise","getInitializationPromise","initializePerf","isPerfInitialized","getDocumentReadyComplete","changeInitializationStatus","readyState","handler","removeEventListener","addEventListener","DEFAULT_SEND_INTERVAL_MS","INITIAL_SEND_TIME_DELAY_MS","DEFAULT_REMAINING_TRIES","MAX_EVENT_COUNT_PER_REQUEST","remainingTries","queue","isTransportSetup","setupTransportService","processQueue","timeOffset","setTimeout","dispatchQueueEvents","staged","splice","log_event","map","source_extension_json_proto3","evt","message","event_time_ms","eventTime","data","request_time_ms","client_info","client_type","js_client_info","log_source","sendEventsToFl","postToFlEndpoint","res","transportWait","nextRequestWaitMillis","requestOffset","isNaN","max","logResponseDetails","Array","isArray","responseAction","flTransportFullUrl","getFlTransportFullUrl","addToQueue","transportHandler","serializer","logger","sendLog","resource","resourceType","logTrace","trace","settingsService","instrumentationEnabled","isAuto","dataCollectionEnabled","requiredApisAvailable","sendTraceLog","logNetworkRequest","networkRequest","networkRequestUrl","url","logEndpointUrl","flEndpointUrl","serializeNetworkRequest","serializeTrace","networkRequestMetric","http_method","httpMethod","http_response_code","response_payload_bytes","responsePayloadBytes","client_start_time_us","startTimeUs","time_to_response_initiated_us","timeToResponseInitiatedUs","time_to_response_completed_us","timeToResponseCompletedUs","perfMetric","application_info","getApplicationInfo","network_request_metric","traceMetric","is_auto","duration_us","durationUs","Object","keys","counters","customAttributes","getAttributes","custom_attributes","trace_metric","google_app_id","web_app_info","page_url","getUrl","service_worker_status","visibility_state","effective_connection_type","application_process_state","MAX_METRIC_NAME_LENGTH","RESERVED_AUTO_PREFIX","oobMetrics","isValidMetricName","traceName","indexOf","convertMetricValueToInteger","providedValue","valueAsInteger","floor","Trace","traceMeasureName","traceStartMark","randomId","traceStopMark","traceMeasure","calculateTraceMetrics","state","api","startTime","duration","attributes","metrics","metricName","counter","numAsInteger","putMetric","customMetricName","attr","isValidName","isValidValue","attributeName","attributeValue","perfMeasureEntries","perfMeasureEntry","getTimeOrigin","navigationTimings","paintTimings","firstInputDelay","route","timeOriginUs","setStartTime","setDuration","domInteractive","domContentLoadedEventEnd","loadEventEnd","FIRST_PAINT","FIRST_CONTENTFUL_PAINT","firstPaint","find","paintObject","firstContentfulPaint","createNetworkRequestEntry","performanceEntry","responseStart","responseEnd","transferSize","FID_WAIT_TIME_MS","setupOobResources","setupOobTraces","setupNetworkRequests","setupUserTimingTraces","resources","setupObserver","timeoutId","createOobTrace","fid","clearTimeout","measures","createUserTimingTrace","substring","PerformanceController","settings","initialized","validateIndexedDBOpenable","isAvailable","error","val","DEFAULT_ENTRY_NAME","getPerformance","getApp","getModularInstance","provider","_getProvider","perfInstance","getImmediate","initializePerformance","isInitialized","existingInstance","initialSettings","getOptions","deepEqual","initialize","factory","container","getProvider","_init","registerPerformance","_registerComponent","Component","registerVersion"],"sources":["../../src/constants.ts","../../src/utils/errors.ts","../../src/utils/console_logger.ts","../../src/services/api_service.ts","../../src/services/iid_service.ts","../../src/utils/string_merger.ts","../../src/services/settings_service.ts","../../src/utils/attributes_utils.ts","../../src/utils/app_utils.ts","../../src/services/remote_config_service.ts","../../src/services/initialization_service.ts","../../src/services/transport_service.ts","../../src/services/perf_logger.ts","../../src/utils/metric_utils.ts","../../src/resources/trace.ts","../../src/resources/network_request.ts","../../src/services/oob_resources_service.ts","../../src/controllers/perf.ts","../../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../package.json';\n\nexport const SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\nexport const TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\nexport const TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\nexport const TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\nexport const OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\n\nexport const FIRST_PAINT_COUNTER_NAME = '_fp';\n\nexport const FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\n\nexport const FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\n\nexport const CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\n\nexport const CONFIG_EXPIRY_LOCAL_STORAGE_KEY =\n  '@firebase/performance/configexpire';\n\nexport const SERVICE = 'performance';\nexport const SERVICE_NAME = 'Performance';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from '../constants';\n\nexport const enum ErrorCode {\n  TRACE_STARTED_BEFORE = 'trace started',\n  TRACE_STOPPED_BEFORE = 'trace stopped',\n  NONPOSITIVE_TRACE_START_TIME = 'nonpositive trace startTime',\n  NONPOSITIVE_TRACE_DURATION = 'nonpositive trace duration',\n  NO_WINDOW = 'no window',\n  NO_APP_ID = 'no app id',\n  NO_PROJECT_ID = 'no project id',\n  NO_API_KEY = 'no api key',\n  INVALID_CC_LOG = 'invalid cc log',\n  FB_NOT_DEFAULT = 'FB not default',\n  RC_NOT_OK = 'RC response not ok',\n  INVALID_ATTRIBUTE_NAME = 'invalid attribute name',\n  INVALID_ATTRIBUTE_VALUE = 'invalid attribute value',\n  INVALID_CUSTOM_METRIC_NAME = 'invalid custom metric name',\n  INVALID_STRING_MERGER_PARAMETER = 'invalid String merger input',\n  ALREADY_INITIALIZED = 'already initialized'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.TRACE_STARTED_BEFORE]: 'Trace {$traceName} was started before.',\n  [ErrorCode.TRACE_STOPPED_BEFORE]: 'Trace {$traceName} is not running.',\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]:\n    'Trace {$traceName} startTime should be positive.',\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]:\n    'Trace {$traceName} duration should be positive.',\n  [ErrorCode.NO_WINDOW]: 'Window is not available.',\n  [ErrorCode.NO_APP_ID]: 'App id is not available.',\n  [ErrorCode.NO_PROJECT_ID]: 'Project id is not available.',\n  [ErrorCode.NO_API_KEY]: 'Api key is not available.',\n  [ErrorCode.INVALID_CC_LOG]: 'Attempted to queue invalid cc event',\n  [ErrorCode.FB_NOT_DEFAULT]:\n    'Performance can only start when Firebase app instance is the default one.',\n  [ErrorCode.RC_NOT_OK]: 'RC response is not ok',\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]:\n    'Attribute name {$attributeName} is invalid.',\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]:\n    'Attribute value {$attributeValue} is invalid.',\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]:\n    'Custom metric name {$customMetricName} is invalid',\n  [ErrorCode.INVALID_STRING_MERGER_PARAMETER]:\n    'Input for String merger is invalid, contact support team to resolve.',\n  [ErrorCode.ALREADY_INITIALIZED]:\n    'initializePerformance() has already been called with ' +\n    'different options. To avoid this error, call initializePerformance() with the ' +\n    'same options as when it was originally called, or call getPerformance() to return the' +\n    ' already initialized instance.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.TRACE_STARTED_BEFORE]: { traceName: string };\n  [ErrorCode.TRACE_STOPPED_BEFORE]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]: { traceName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]: { attributeName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]: { attributeValue: string };\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]: { customMetricName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SERVICE_NAME } from '../constants';\n\nexport const consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { isIndexedDBAvailable, areCookiesEnabled } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\n\ndeclare global {\n  interface Window {\n    PerformanceObserver: typeof PerformanceObserver;\n    perfMetrics?: { onFirstInputDelay(fn: (fid: number) => void): void };\n  }\n}\n\nlet apiInstance: Api | undefined;\nlet windowInstance: Window | undefined;\n\nexport type EntryType =\n  | 'mark'\n  | 'measure'\n  | 'paint'\n  | 'resource'\n  | 'frame'\n  | 'navigation';\n\n/**\n * This class holds a reference to various browser related objects injected by\n * set methods.\n */\nexport class Api {\n  private readonly performance: Performance;\n  /** PreformanceObserver constructor function. */\n  private readonly PerformanceObserver: typeof PerformanceObserver;\n  private readonly windowLocation: Location;\n  readonly onFirstInputDelay?: (fn: (fid: number) => void) => void;\n  readonly localStorage?: Storage;\n  readonly document: Document;\n  readonly navigator: Navigator;\n\n  constructor(readonly window?: Window) {\n    if (!window) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n\n  getUrl(): string {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  }\n\n  mark(name: string): void {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n    this.performance.mark(name);\n  }\n\n  measure(measureName: string, mark1: string, mark2: string): void {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n    this.performance.measure(measureName, mark1, mark2);\n  }\n\n  getEntriesByType(type: EntryType): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n    return this.performance.getEntriesByType(type);\n  }\n\n  getEntriesByName(name: string): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n    return this.performance.getEntriesByName(name);\n  }\n\n  getTimeOrigin(): number {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return (\n      this.performance &&\n      (this.performance.timeOrigin || this.performance.timing.navigationStart)\n    );\n  }\n\n  requiredApisAvailable(): boolean {\n    if (!fetch || !Promise || !areCookiesEnabled()) {\n      consoleLogger.info(\n        'Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.'\n      );\n      return false;\n    }\n\n    if (!isIndexedDBAvailable()) {\n      consoleLogger.info('IndexedDB is not supported by current browswer');\n      return false;\n    }\n    return true;\n  }\n\n  setupObserver(\n    entryType: EntryType,\n    callback: (entry: PerformanceEntry) => void\n  ): void {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n    const observer = new this.PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    });\n\n    // Start observing the entry types you care about.\n    observer.observe({ entryTypes: [entryType] });\n  }\n\n  static getInstance(): Api {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n    return apiInstance;\n  }\n}\n\nexport function setupApi(window: Window): void {\n  windowInstance = window;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\n\nlet iid: string | undefined;\nlet authToken: string | undefined;\n\nexport function getIidPromise(\n  installationsService: _FirebaseInstallationsInternal\n): Promise<string> {\n  const iidPromise = installationsService.getId();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  iidPromise.then((iidVal: string) => {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n\n// This method should be used after the iid is retrieved by getIidPromise method.\nexport function getIid(): string | undefined {\n  return iid;\n}\n\nexport function getAuthTokenPromise(\n  installationsService: _FirebaseInstallationsInternal\n): Promise<string> {\n  const authTokenPromise = installationsService.getToken();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  authTokenPromise.then((authTokenVal: string) => {\n    authToken = authTokenVal;\n  });\n  return authTokenPromise;\n}\n\nexport function getAuthenticationToken(): string | undefined {\n  return authToken;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\n\nexport function mergeStrings(part1: string, part2: string): string {\n  const sizeDiff = part1.length - part2.length;\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_STRING_MERGER_PARAMETER);\n  }\n\n  const resultArray = [];\n  for (let i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { mergeStrings } from '../utils/string_merger';\n\nlet settingsServiceInstance: SettingsService | undefined;\n\nexport class SettingsService {\n  // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n  instrumentationEnabled = true;\n\n  // The variable which controls logging of custom traces.\n  dataCollectionEnabled = true;\n\n  // Configuration flags set through remote config.\n  loggingEnabled = false;\n  // Sampling rate between 0 and 1.\n  tracesSamplingRate = 1;\n  networkRequestsSamplingRate = 1;\n\n  // Address of logging service.\n  logEndPointUrl =\n    'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n  // Performance event transport endpoint URL which should be compatible with proto3.\n  // New Address for transport service, not configurable via Remote Config.\n  flTransportEndpointUrl = mergeStrings(\n    'hts/frbslgigp.ogepscmv/ieo/eaylg',\n    'tp:/ieaeogn-agolai.o/1frlglgc/o'\n  );\n\n  transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n\n  // Source type for performance event logs.\n  logSource = 462;\n\n  // Flags which control per session logging of traces and network requests.\n  logTraceAfterSampling = false;\n  logNetworkAfterSampling = false;\n\n  // TTL of config retrieved from remote config in hours.\n  configTimeToLive = 12;\n\n  getFlTransportFullUrl(): string {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  }\n\n  static getInstance(): SettingsService {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n    return settingsServiceInstance;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\n\n// The values and orders of the following enums should not be changed.\nconst enum ServiceWorkerStatus {\n  UNKNOWN = 0,\n  UNSUPPORTED = 1,\n  CONTROLLED = 2,\n  UNCONTROLLED = 3\n}\n\nexport enum VisibilityState {\n  UNKNOWN = 0,\n  VISIBLE = 1,\n  HIDDEN = 2\n}\n\nconst enum EffectiveConnectionType {\n  UNKNOWN = 0,\n  CONNECTION_SLOW_2G = 1,\n  CONNECTION_2G = 2,\n  CONNECTION_3G = 3,\n  CONNECTION_4G = 4\n}\n\n/**\n * NetworkInformation\n *\n * ref: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\ninterface NetworkInformation {\n  readonly effectiveType?: 'slow-2g' | '2g' | '3g' | '4g';\n}\n\ninterface NavigatorWithConnection extends Navigator {\n  readonly connection: NetworkInformation;\n}\n\nconst RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nconst ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nconst MAX_ATTRIBUTE_NAME_LENGTH = 40;\nconst MAX_ATTRIBUTE_VALUE_LENGTH = 100;\n\nexport function getServiceWorkerStatus(): ServiceWorkerStatus {\n  const navigator = Api.getInstance().navigator;\n  if ('serviceWorker' in navigator) {\n    if (navigator.serviceWorker.controller) {\n      return ServiceWorkerStatus.CONTROLLED;\n    } else {\n      return ServiceWorkerStatus.UNCONTROLLED;\n    }\n  } else {\n    return ServiceWorkerStatus.UNSUPPORTED;\n  }\n}\n\nexport function getVisibilityState(): VisibilityState {\n  const document = Api.getInstance().document;\n  const visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nexport function getEffectiveConnectionType(): EffectiveConnectionType {\n  const navigator = Api.getInstance().navigator;\n  const navigatorConnection = (navigator as NavigatorWithConnection).connection;\n  const effectiveType =\n    navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return EffectiveConnectionType.CONNECTION_SLOW_2G;\n    case '2g':\n      return EffectiveConnectionType.CONNECTION_2G;\n    case '3g':\n      return EffectiveConnectionType.CONNECTION_3G;\n    case '4g':\n      return EffectiveConnectionType.CONNECTION_4G;\n    default:\n      return EffectiveConnectionType.UNKNOWN;\n  }\n}\n\nexport function isValidCustomAttributeName(name: string): boolean {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n  const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix =>\n    name.startsWith(prefix)\n  );\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\n\nexport function isValidCustomAttributeValue(value: string): boolean {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\nimport { FirebaseApp } from '@firebase/app';\n\nexport function getAppId(firebaseApp: FirebaseApp): string {\n  const appId = firebaseApp.options?.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(ErrorCode.NO_APP_ID);\n  }\n  return appId;\n}\n\nexport function getProjectId(firebaseApp: FirebaseApp): string {\n  const projectId = firebaseApp.options?.projectId;\n  if (!projectId) {\n    throw ERROR_FACTORY.create(ErrorCode.NO_PROJECT_ID);\n  }\n  return projectId;\n}\n\nexport function getApiKey(firebaseApp: FirebaseApp): string {\n  const apiKey = firebaseApp.options?.apiKey;\n  if (!apiKey) {\n    throw ERROR_FACTORY.create(ErrorCode.NO_API_KEY);\n  }\n  return apiKey;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n  CONFIG_LOCAL_STORAGE_KEY,\n  SDK_VERSION\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\n\nimport { Api } from './api_service';\nimport { getAuthTokenPromise } from './iid_service';\nimport { SettingsService } from './settings_service';\nimport { PerformanceController } from '../controllers/perf';\nimport { getProjectId, getApiKey, getAppId } from '../utils/app_utils';\n\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n\ninterface SecondaryConfig {\n  loggingEnabled?: boolean;\n  logSource?: number;\n  logEndPointUrl?: string;\n  transportKey?: string;\n  tracesSamplingRate?: number;\n  networkRequestsSamplingRate?: number;\n}\n\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nconst DEFAULT_CONFIGS: SecondaryConfig = {\n  loggingEnabled: true\n};\n\n/* eslint-disable camelcase */\ninterface RemoteConfigTemplate {\n  fpr_enabled?: string;\n  fpr_log_source?: string;\n  fpr_log_endpoint_url?: string;\n  fpr_log_transport_key?: string;\n  fpr_log_transport_web_percent?: string;\n  fpr_vc_network_request_sampling_rate?: string;\n  fpr_vc_trace_sampling_rate?: string;\n  fpr_vc_session_sampling_rate?: string;\n}\n/* eslint-enable camelcase */\n\ninterface RemoteConfigResponse {\n  entries?: RemoteConfigTemplate;\n  state?: string;\n}\n\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nexport function getConfig(\n  performanceController: PerformanceController,\n  iid: string\n): Promise<void> {\n  const config = getStoredConfig();\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(performanceController, iid)\n    .then(processConfig)\n    .then(\n      config => storeConfig(config),\n      /** Do nothing for error, use defaults set in settings service. */\n      () => {}\n    );\n}\n\nfunction getStoredConfig(): RemoteConfigResponse | undefined {\n  const localStorage = Api.getInstance().localStorage;\n  if (!localStorage) {\n    return;\n  }\n  const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    const configResponse: RemoteConfigResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch {\n    return;\n  }\n}\n\nfunction storeConfig(config: RemoteConfigResponse | undefined): void {\n  const localStorage = Api.getInstance().localStorage;\n  if (!config || !localStorage) {\n    return;\n  }\n\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(\n    CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n    String(\n      Date.now() +\n        SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000\n    )\n  );\n}\n\nconst COULD_NOT_GET_CONFIG_MSG =\n  'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(\n  performanceController: PerformanceController,\n  iid: string\n): Promise<RemoteConfigResponse | undefined> {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise(performanceController.installations)\n    .then(authToken => {\n      const projectId = getProjectId(performanceController.app);\n      const apiKey = getApiKey(performanceController.app);\n      const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${apiKey}`;\n      const request = new Request(configEndPoint, {\n        method: 'POST',\n        headers: { Authorization: `${FIS_AUTH_PREFIX} ${authToken}` },\n        /* eslint-disable camelcase */\n        body: JSON.stringify({\n          app_instance_id: iid,\n          app_instance_id_token: authToken,\n          app_id: getAppId(performanceController.app),\n          app_version: SDK_VERSION,\n          sdk_version: REMOTE_CONFIG_SDK_VERSION\n        })\n        /* eslint-enable camelcase */\n      });\n      return fetch(request).then(response => {\n        if (response.ok) {\n          return response.json() as RemoteConfigResponse;\n        }\n        // In case response is not ok. This will be caught by catch.\n        throw ERROR_FACTORY.create(ErrorCode.RC_NOT_OK);\n      });\n    })\n    .catch(() => {\n      consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n      return undefined;\n    });\n}\n\n/**\n * Processes config coming either from calling RC or from local storage.\n * This method only runs if call is successful or config in storage\n * is valid.\n */\nfunction processConfig(\n  config?: RemoteConfigResponse\n): RemoteConfigResponse | undefined {\n  if (!config) {\n    return config;\n  }\n  const settingsServiceInstance = SettingsService.getInstance();\n  const entries = config.entries || {};\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled =\n      String(entries.fpr_enabled) === 'true';\n  } else if (DEFAULT_CONFIGS.loggingEnabled !== undefined) {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  } else if (DEFAULT_CONFIGS.logSource) {\n    settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\n  }\n\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } else if (DEFAULT_CONFIGS.logEndPointUrl) {\n    settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\n  }\n\n  // Key from Remote Config has to be non-empty string, otherwsie use local value.\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  } else if (DEFAULT_CONFIGS.transportKey) {\n    settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\n  }\n\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(\n      entries.fpr_vc_network_request_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate =\n      DEFAULT_CONFIGS.networkRequestsSamplingRate;\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(\n      entries.fpr_vc_trace_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate =\n      DEFAULT_CONFIGS.tracesSamplingRate;\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.tracesSamplingRate\n  );\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.networkRequestsSamplingRate\n  );\n  return config;\n}\n\nfunction configValid(expiry: string): boolean {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate: number): boolean {\n  return Math.random() <= samplingRate;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIidPromise } from './iid_service';\nimport { getConfig } from './remote_config_service';\nimport { Api } from './api_service';\nimport { PerformanceController } from '../controllers/perf';\n\nconst enum InitializationStatus {\n  notInitialized = 1,\n  initializationPending,\n  initialized\n}\n\nlet initializationStatus = InitializationStatus.notInitialized;\n\nlet initializationPromise: Promise<void> | undefined;\n\nexport function getInitializationPromise(\n  performanceController: PerformanceController\n): Promise<void> {\n  initializationStatus = InitializationStatus.initializationPending;\n\n  initializationPromise =\n    initializationPromise || initializePerf(performanceController);\n\n  return initializationPromise;\n}\n\nexport function isPerfInitialized(): boolean {\n  return initializationStatus === InitializationStatus.initialized;\n}\n\nfunction initializePerf(\n  performanceController: PerformanceController\n): Promise<void> {\n  return getDocumentReadyComplete()\n    .then(() => getIidPromise(performanceController.installations))\n    .then(iid => getConfig(performanceController, iid))\n    .then(\n      () => changeInitializationStatus(),\n      () => changeInitializationStatus()\n    );\n}\n\n/**\n * Returns a promise which resolves whenever the document readystate is complete or\n * immediately if it is called after page load complete.\n */\nfunction getDocumentReadyComplete(): Promise<void> {\n  const document = Api.getInstance().document;\n  return new Promise(resolve => {\n    if (document && document.readyState !== 'complete') {\n      const handler = (): void => {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus(): void {\n  initializationStatus = InitializationStatus.initialized;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsService } from './settings_service';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\n// If end point does not work, the call will be tried for these many times.\nconst DEFAULT_REMAINING_TRIES = 3;\nconst MAX_EVENT_COUNT_PER_REQUEST = 1000;\nlet remainingTries = DEFAULT_REMAINING_TRIES;\n\ninterface LogResponseDetails {\n  responseAction?: string;\n}\n\ninterface BatchEvent {\n  message: string;\n  eventTime: number;\n}\n\n/* eslint-disable camelcase */\n// CC/Fl accepted log format.\ninterface TransportBatchLogFormat {\n  request_time_ms: string;\n  client_info: ClientInfo;\n  log_source: number;\n  log_event: Log[];\n}\n\ninterface ClientInfo {\n  client_type: number;\n  js_client_info: {};\n}\n\ninterface Log {\n  source_extension_json_proto3: string;\n  event_time_ms: string;\n}\n/* eslint-enable camelcase */\n\nlet queue: BatchEvent[] = [];\n\nlet isTransportSetup: boolean = false;\n\nexport function setupTransportService(): void {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\n\n/**\n * Utilized by testing to clean up message queue and un-initialize transport service.\n */\nexport function resetTransportService(): void {\n  isTransportSetup = false;\n  queue = [];\n}\n\nfunction processQueue(timeOffset: number): void {\n  setTimeout(() => {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    }\n\n    // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n\n    dispatchQueueEvents();\n  }, timeOffset);\n}\n\nfunction dispatchQueueEvents(): void {\n  // Extract events up to the maximum cap of single logRequest from top of \"official queue\".\n  // The staged events will be used for current logRequest attempt, remaining events will be kept\n  // for next attempt.\n  const staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);\n\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n  const log_event: Log[] = staged.map(evt => ({\n    source_extension_json_proto3: evt.message,\n    event_time_ms: String(evt.eventTime)\n  }));\n\n  const data: TransportBatchLogFormat = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1, // 1 is JS\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event\n  };\n  /* eslint-enable camelcase */\n\n  sendEventsToFl(data, staged).catch(() => {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = [...staged, ...queue];\n    remainingTries--;\n    consoleLogger.info(`Tries left: ${remainingTries}.`);\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\n\nfunction sendEventsToFl(\n  data: TransportBatchLogFormat,\n  staged: BatchEvent[]\n): Promise<void> {\n  return postToFlEndpoint(data)\n    .then(res => {\n      if (!res.ok) {\n        consoleLogger.info('Call to Firebase backend failed.');\n      }\n      return res.json();\n    })\n    .then(res => {\n      // Find the next call wait time from the response.\n      const transportWait = Number(res.nextRequestWaitMillis);\n      let requestOffset = DEFAULT_SEND_INTERVAL_MS;\n      if (!isNaN(transportWait)) {\n        requestOffset = Math.max(transportWait, requestOffset);\n      }\n\n      // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n      // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n      const logResponseDetails: LogResponseDetails[] = res.logResponseDetails;\n      if (\n        Array.isArray(logResponseDetails) &&\n        logResponseDetails.length > 0 &&\n        logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER'\n      ) {\n        queue = [...staged, ...queue];\n        consoleLogger.info(`Retry transport request later.`);\n      }\n\n      remainingTries = DEFAULT_REMAINING_TRIES;\n      // Schedule the next process.\n      processQueue(requestOffset);\n    });\n}\n\nfunction postToFlEndpoint(data: TransportBatchLogFormat): Promise<Response> {\n  const flTransportFullUrl =\n    SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\n\nfunction addToQueue(evt: BatchEvent): void {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_CC_LOG);\n  }\n  // Add the new event to the queue.\n  queue = [...queue, evt];\n}\n\n/** Log handler for cc service to send the performance logs to the server. */\nexport function transportHandler(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  serializer: (...args: any[]) => string\n): (...args: unknown[]) => void {\n  return (...args) => {\n    const message = serializer(...args);\n    addToQueue({\n      message,\n      eventTime: Date.now()\n    });\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIid } from './iid_service';\nimport { NetworkRequest } from '../resources/network_request';\nimport { Trace } from '../resources/trace';\nimport { Api } from './api_service';\nimport { SettingsService } from './settings_service';\nimport {\n  getServiceWorkerStatus,\n  getVisibilityState,\n  VisibilityState,\n  getEffectiveConnectionType\n} from '../utils/attributes_utils';\nimport {\n  isPerfInitialized,\n  getInitializationPromise\n} from './initialization_service';\nimport { transportHandler } from './transport_service';\nimport { SDK_VERSION } from '../constants';\nimport { FirebaseApp } from '@firebase/app';\nimport { getAppId } from '../utils/app_utils';\n\nconst enum ResourceType {\n  NetworkRequest,\n  Trace\n}\n\n/* eslint-disable camelcase */\ninterface ApplicationInfo {\n  google_app_id: string;\n  app_instance_id?: string;\n  web_app_info: WebAppInfo;\n  application_process_state: number;\n}\n\ninterface WebAppInfo {\n  sdk_version: string;\n  page_url: string;\n  service_worker_status: number;\n  visibility_state: number;\n  effective_connection_type: number;\n}\n\ninterface PerfNetworkLog {\n  application_info: ApplicationInfo;\n  network_request_metric: NetworkRequestMetric;\n}\n\ninterface PerfTraceLog {\n  application_info: ApplicationInfo;\n  trace_metric: TraceMetric;\n}\n\ninterface NetworkRequestMetric {\n  url: string;\n  http_method: number;\n  http_response_code: number;\n  response_payload_bytes?: number;\n  client_start_time_us?: number;\n  time_to_response_initiated_us?: number;\n  time_to_response_completed_us?: number;\n}\n\ninterface TraceMetric {\n  name: string;\n  is_auto: boolean;\n  client_start_time_us: number;\n  duration_us: number;\n  counters?: { [key: string]: number };\n  custom_attributes?: { [key: string]: string };\n}\n\n/* eslint-enble camelcase */\n\nlet logger: (\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n) => void | undefined;\n// This method is not called before initialization.\nfunction sendLog(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): void {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n  logger(resource, resourceType);\n}\n\nexport function logTrace(trace: Trace): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n\n  // Only log the page load auto traces if page is visible.\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n    getInitializationPromise(trace.performanceController).then(\n      () => sendTraceLog(trace),\n      () => sendTraceLog(trace)\n    );\n  }\n}\n\nfunction sendTraceLog(trace: Trace): void {\n  if (!getIid()) {\n    return;\n  }\n\n  const settingsService = SettingsService.getInstance();\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logTraceAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(trace, ResourceType.Trace), 0);\n}\n\nexport function logNetworkRequest(networkRequest: NetworkRequest): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n\n  // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n  const networkRequestUrl = networkRequest.url;\n\n  // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n  const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n  if (\n    networkRequestUrl === logEndpointUrl ||\n    networkRequestUrl === flEndpointUrl\n  ) {\n    return;\n  }\n\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logNetworkAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(networkRequest, ResourceType.NetworkRequest), 0);\n}\n\nfunction serializer(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): string {\n  if (resourceType === ResourceType.NetworkRequest) {\n    return serializeNetworkRequest(resource as NetworkRequest);\n  }\n  return serializeTrace(resource as Trace);\n}\n\nfunction serializeNetworkRequest(networkRequest: NetworkRequest): string {\n  const networkRequestMetric: NetworkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  const perfMetric: PerfNetworkLog = {\n    application_info: getApplicationInfo(\n      networkRequest.performanceController.app\n    ),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace: Trace): string {\n  const traceMetric: TraceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n  const customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n\n  const perfMetric: PerfTraceLog = {\n    application_info: getApplicationInfo(trace.performanceController.app),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo(firebaseApp: FirebaseApp): ApplicationInfo {\n  return {\n    google_app_id: getAppId(firebaseApp),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME,\n  OOB_TRACE_PAGE_LOAD_PREFIX\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst MAX_METRIC_NAME_LENGTH = 100;\nconst RESERVED_AUTO_PREFIX = '_';\nconst oobMetrics = [\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n];\n\n/**\n * Returns true if the metric is custom and does not start with reserved prefix, or if\n * the metric is one of out of the box page load trace metrics.\n */\nexport function isValidMetricName(name: string, traceName?: string): boolean {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n  return (\n    (traceName &&\n      traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&\n      oobMetrics.indexOf(name) > -1) ||\n    !name.startsWith(RESERVED_AUTO_PREFIX)\n  );\n}\n\n/**\n * Converts the provided value to an integer value to be used in case of a metric.\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\n *\n * @returns Converted integer number to be set for the metric.\n */\nexport function convertMetricValueToInteger(providedValue: number): number {\n  const valueAsInteger: number = Math.floor(providedValue);\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(\n      `Metric value should be an Integer, setting the value as : ${valueAsInteger}.`\n    );\n  }\n  return valueAsInteger;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TRACE_START_MARK_PREFIX,\n  TRACE_STOP_MARK_PREFIX,\n  TRACE_MEASURE_PREFIX,\n  OOB_TRACE_PAGE_LOAD_PREFIX,\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n} from '../constants';\nimport { Api } from '../services/api_service';\nimport { logTrace } from '../services/perf_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport {\n  isValidCustomAttributeName,\n  isValidCustomAttributeValue\n} from '../utils/attributes_utils';\nimport {\n  isValidMetricName,\n  convertMetricValueToInteger\n} from '../utils/metric_utils';\nimport { PerformanceTrace } from '../public_types';\nimport { PerformanceController } from '../controllers/perf';\n\nconst enum TraceState {\n  UNINITIALIZED = 1,\n  RUNNING,\n  TERMINATED\n}\n\nexport class Trace implements PerformanceTrace {\n  private state: TraceState = TraceState.UNINITIALIZED;\n  startTimeUs!: number;\n  durationUs!: number;\n  private customAttributes: { [key: string]: string } = {};\n  counters: { [counterName: string]: number } = {};\n  private api = Api.getInstance();\n  private randomId = Math.floor(Math.random() * 1000000);\n  private traceStartMark!: string;\n  private traceStopMark!: string;\n  private traceMeasure!: string;\n\n  /**\n   * @param performanceController The performance controller running.\n   * @param name The name of the trace.\n   * @param isAuto If the trace is auto-instrumented.\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\n   * is only set when the trace is built for logging when the user directly uses the user timing\n   * api (performance.mark and performance.measure).\n   */\n  constructor(\n    readonly performanceController: PerformanceController,\n    readonly name: string,\n    readonly isAuto = false,\n    traceMeasureName?: string\n  ) {\n    if (!this.isAuto) {\n      this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceMeasure =\n        traceMeasureName ||\n        `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n\n  /**\n   * Starts a trace. The measurement of the duration starts at this point.\n   */\n  start(): void {\n    if (this.state !== TraceState.UNINITIALIZED) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STARTED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.api.mark(this.traceStartMark);\n    this.state = TraceState.RUNNING;\n  }\n\n  /**\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\n   * is logged.\n   */\n  stop(): void {\n    if (this.state !== TraceState.RUNNING) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STOPPED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.state = TraceState.TERMINATED;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(\n      this.traceMeasure,\n      this.traceStartMark,\n      this.traceStopMark\n    );\n    this.calculateTraceMetrics();\n    logTrace(this);\n  }\n\n  /**\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\n   * directly. No need to use start and stop methods.\n   * @param startTime Trace start time since epoch in millisec\n   * @param duration The duraction of the trace in millisec\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\n   */\n  record(\n    startTime: number,\n    duration: number,\n    options?: {\n      metrics?: { [key: string]: number };\n      attributes?: { [key: string]: string };\n    }\n  ): void {\n    if (startTime <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_START_TIME, {\n        traceName: this.name\n      });\n    }\n    if (duration <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_DURATION, {\n        traceName: this.name\n      });\n    }\n\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n    if (options && options.attributes) {\n      this.customAttributes = { ...options.attributes };\n    }\n    if (options && options.metrics) {\n      for (const metricName of Object.keys(options.metrics)) {\n        if (!isNaN(Number(options.metrics[metricName]))) {\n          this.counters[metricName] = Math.floor(\n            Number(options.metrics[metricName])\n          );\n        }\n      }\n    }\n    logTrace(this);\n  }\n\n  /**\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\n   * custom metric if one with the given name does not exist. The value will be floored down to an\n   * integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Increment by value\n   */\n  incrementMetric(counter: string, numAsInteger = 1): void {\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, numAsInteger);\n    } else {\n      this.putMetric(counter, this.counters[counter] + numAsInteger);\n    }\n  }\n\n  /**\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\n   * given name does not exist. The value will be floored down to an integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Set custom metric to this value\n   */\n  putMetric(counter: string, numAsInteger: number): void {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = convertMetricValueToInteger(numAsInteger ?? 0);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_CUSTOM_METRIC_NAME, {\n        customMetricName: counter\n      });\n    }\n  }\n\n  /**\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\n   * not exist will return zero.\n   * @param counter\n   */\n  getMetric(counter: string): number {\n    return this.counters[counter] || 0;\n  }\n\n  /**\n   * Sets a custom attribute of a trace to a certain value.\n   * @param attr\n   * @param value\n   */\n  putAttribute(attr: string, value: string): void {\n    const isValidName = isValidCustomAttributeName(attr);\n    const isValidValue = isValidCustomAttributeValue(value);\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    }\n    // Throw appropriate error when the attribute name or value is invalid.\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_NAME, {\n        attributeName: attr\n      });\n    }\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_VALUE, {\n        attributeValue: value\n      });\n    }\n  }\n\n  /**\n   * Retrieves the value a custom attribute of a trace is set to.\n   * @param attr\n   */\n  getAttribute(attr: string): string | undefined {\n    return this.customAttributes[attr];\n  }\n\n  removeAttribute(attr: string): void {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n    delete this.customAttributes[attr];\n  }\n\n  getAttributes(): { [key: string]: string } {\n    return { ...this.customAttributes };\n  }\n\n  private setStartTime(startTime: number): void {\n    this.startTimeUs = startTime;\n  }\n\n  private setDuration(duration: number): void {\n    this.durationUs = duration;\n  }\n\n  /**\n   * Calculates and assigns the duration and start time of the trace using the measure performance\n   * entry.\n   */\n  private calculateTraceMetrics(): void {\n    const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor(\n        (perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000\n      );\n    }\n  }\n\n  /**\n   * @param navigationTimings A single element array which contains the navigationTIming object of\n   * the page load\n   * @param paintTimings A array which contains paintTiming object of the page load\n   * @param firstInputDelay First input delay in millisec\n   */\n  static createOobTrace(\n    performanceController: PerformanceController,\n    navigationTimings: PerformanceNavigationTiming[],\n    paintTimings: PerformanceEntry[],\n    firstInputDelay?: number\n  ): void {\n    const route = Api.getInstance().getUrl();\n    if (!route) {\n      return;\n    }\n    const trace = new Trace(\n      performanceController,\n      OOB_TRACE_PAGE_LOAD_PREFIX + route,\n      true\n    );\n    const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs);\n\n    // navigationTimings includes only one element.\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric(\n        'domInteractive',\n        Math.floor(navigationTimings[0].domInteractive * 1000)\n      );\n      trace.putMetric(\n        'domContentLoadedEventEnd',\n        Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000)\n      );\n      trace.putMetric(\n        'loadEventEnd',\n        Math.floor(navigationTimings[0].loadEventEnd * 1000)\n      );\n    }\n\n    const FIRST_PAINT = 'first-paint';\n    const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n    if (paintTimings) {\n      const firstPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_PAINT\n      );\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(\n          FIRST_PAINT_COUNTER_NAME,\n          Math.floor(firstPaint.startTime * 1000)\n        );\n      }\n      const firstContentfulPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT\n      );\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(\n          FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n          Math.floor(firstContentfulPaint.startTime * 1000)\n        );\n      }\n\n      if (firstInputDelay) {\n        trace.putMetric(\n          FIRST_INPUT_DELAY_COUNTER_NAME,\n          Math.floor(firstInputDelay * 1000)\n        );\n      }\n    }\n\n    logTrace(trace);\n  }\n\n  static createUserTimingTrace(\n    performanceController: PerformanceController,\n    measureName: string\n  ): void {\n    const trace = new Trace(\n      performanceController,\n      measureName,\n      false,\n      measureName\n    );\n    logTrace(trace);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\nimport { logNetworkRequest } from '../services/perf_logger';\nimport { PerformanceController } from '../controllers/perf';\n\n// The order of values of this enum should not be changed.\nexport const enum HttpMethod {\n  HTTP_METHOD_UNKNOWN = 0,\n  GET = 1,\n  PUT = 2,\n  POST = 3,\n  DELETE = 4,\n  HEAD = 5,\n  PATCH = 6,\n  OPTIONS = 7,\n  TRACE = 8,\n  CONNECT = 9\n}\n\n// Durations are in microseconds.\nexport interface NetworkRequest {\n  performanceController: PerformanceController;\n  url: string;\n  httpMethod?: HttpMethod;\n  requestPayloadBytes?: number;\n  responsePayloadBytes?: number;\n  httpResponseCode?: number;\n  responseContentType?: string;\n  startTimeUs?: number;\n  timeToRequestCompletedUs?: number;\n  timeToResponseInitiatedUs?: number;\n  timeToResponseCompletedUs?: number;\n}\n\nexport function createNetworkRequestEntry(\n  performanceController: PerformanceController,\n  entry: PerformanceEntry\n): void {\n  const performanceEntry = entry as PerformanceResourceTiming;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  const timeOrigin = Api.getInstance().getTimeOrigin();\n  const startTimeUs = Math.floor(\n    (performanceEntry.startTime + timeOrigin) * 1000\n  );\n  const timeToResponseInitiatedUs = performanceEntry.responseStart\n    ? Math.floor(\n        (performanceEntry.responseStart - performanceEntry.startTime) * 1000\n      )\n    : undefined;\n  const timeToResponseCompletedUs = Math.floor(\n    (performanceEntry.responseEnd - performanceEntry.startTime) * 1000\n  );\n  // Remove the query params from logged network request url.\n  const url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  const networkRequest: NetworkRequest = {\n    performanceController,\n    url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs,\n    timeToResponseInitiatedUs,\n    timeToResponseCompletedUs\n  };\n\n  logNetworkRequest(networkRequest);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from './api_service';\nimport { Trace } from '../resources/trace';\nimport { createNetworkRequestEntry } from '../resources/network_request';\nimport { TRACE_MEASURE_PREFIX } from '../constants';\nimport { getIid } from './iid_service';\nimport { PerformanceController } from '../controllers/perf';\n\nconst FID_WAIT_TIME_MS = 5000;\n\nexport function setupOobResources(\n  performanceController: PerformanceController\n): void {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n  setTimeout(() => setupOobTraces(performanceController), 0);\n  setTimeout(() => setupNetworkRequests(performanceController), 0);\n  setTimeout(() => setupUserTimingTraces(performanceController), 0);\n}\n\nfunction setupNetworkRequests(\n  performanceController: PerformanceController\n): void {\n  const api = Api.getInstance();\n  const resources = api.getEntriesByType('resource');\n  for (const resource of resources) {\n    createNetworkRequestEntry(performanceController, resource);\n  }\n  api.setupObserver('resource', entry =>\n    createNetworkRequestEntry(performanceController, entry)\n  );\n}\n\nfunction setupOobTraces(performanceController: PerformanceController): void {\n  const api = Api.getInstance();\n  const navigationTimings = api.getEntriesByType(\n    'navigation'\n  ) as PerformanceNavigationTiming[];\n  const paintTimings = api.getEntriesByType('paint');\n  // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeoutId: any = setTimeout(() => {\n      Trace.createOobTrace(\n        performanceController,\n        navigationTimings,\n        paintTimings\n      );\n      timeoutId = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay((fid: number) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        Trace.createOobTrace(\n          performanceController,\n          navigationTimings,\n          paintTimings,\n          fid\n        );\n      }\n    });\n  } else {\n    Trace.createOobTrace(\n      performanceController,\n      navigationTimings,\n      paintTimings\n    );\n  }\n}\n\nfunction setupUserTimingTraces(\n  performanceController: PerformanceController\n): void {\n  const api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  const measures = api.getEntriesByType('measure');\n  for (const measure of measures) {\n    createUserTimingTrace(performanceController, measure);\n  }\n  // Setup an observer to capture the measures from this point on.\n  api.setupObserver('measure', entry =>\n    createUserTimingTrace(performanceController, entry)\n  );\n}\n\nfunction createUserTimingTrace(\n  performanceController: PerformanceController,\n  measure: PerformanceEntry\n): void {\n  const measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n  if (\n    measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===\n    TRACE_MEASURE_PREFIX\n  ) {\n    return;\n  }\n  Trace.createUserTimingTrace(performanceController, measureName);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { setupOobResources } from '../services/oob_resources_service';\nimport { SettingsService } from '../services/settings_service';\nimport { getInitializationPromise } from '../services/initialization_service';\nimport { Api } from '../services/api_service';\nimport { FirebaseApp } from '@firebase/app';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { PerformanceSettings, FirebasePerformance } from '../public_types';\nimport { validateIndexedDBOpenable } from '@firebase/util';\nimport { setupTransportService } from '../services/transport_service';\nimport { consoleLogger } from '../utils/console_logger';\n\nexport class PerformanceController implements FirebasePerformance {\n  private initialized: boolean = false;\n\n  constructor(\n    readonly app: FirebaseApp,\n    readonly installations: _FirebaseInstallationsInternal\n  ) {}\n\n  /**\n   * This method *must* be called internally as part of creating a\n   * PerformanceController instance.\n   *\n   * Currently it's not possible to pass the settings object through the\n   * constructor using Components, so this method exists to be called with the\n   * desired settings, to ensure nothing is collected without the user's\n   * consent.\n   */\n  _init(settings?: PerformanceSettings): void {\n    if (this.initialized) {\n      return;\n    }\n\n    if (settings?.dataCollectionEnabled !== undefined) {\n      this.dataCollectionEnabled = settings.dataCollectionEnabled;\n    }\n    if (settings?.instrumentationEnabled !== undefined) {\n      this.instrumentationEnabled = settings.instrumentationEnabled;\n    }\n\n    if (Api.getInstance().requiredApisAvailable()) {\n      validateIndexedDBOpenable()\n        .then(isAvailable => {\n          if (isAvailable) {\n            setupTransportService();\n            getInitializationPromise(this).then(\n              () => setupOobResources(this),\n              () => setupOobResources(this)\n            );\n            this.initialized = true;\n          }\n        })\n        .catch(error => {\n          consoleLogger.info(`Environment doesn't support IndexedDB: ${error}`);\n        });\n    } else {\n      consoleLogger.info(\n        'Firebase Performance cannot start if the browser does not support ' +\n          '\"Fetch\" and \"Promise\", or cookies are disabled.'\n      );\n    }\n  }\n\n  set instrumentationEnabled(val: boolean) {\n    SettingsService.getInstance().instrumentationEnabled = val;\n  }\n  get instrumentationEnabled(): boolean {\n    return SettingsService.getInstance().instrumentationEnabled;\n  }\n\n  set dataCollectionEnabled(val: boolean) {\n    SettingsService.getInstance().dataCollectionEnabled = val;\n  }\n  get dataCollectionEnabled(): boolean {\n    return SettingsService.getInstance().dataCollectionEnabled;\n  }\n}\n","/**\n * Firebase Performance Monitoring\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebasePerformance,\n  PerformanceSettings,\n  PerformanceTrace\n} from './public_types';\nimport { ERROR_FACTORY, ErrorCode } from './utils/errors';\nimport { setupApi } from './services/api_service';\nimport { PerformanceController } from './controllers/perf';\nimport {\n  _registerComponent,\n  _getProvider,\n  registerVersion,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport {\n  InstanceFactory,\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { name, version } from '../package.json';\nimport { Trace } from './resources/trace';\nimport '@firebase/installations';\nimport { deepEqual, getModularInstance } from '@firebase/util';\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\n * Returns a {@link FirebasePerformance} instance for the given app.\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @public\n */\nexport function getPerformance(\n  app: FirebaseApp = getApp()\n): FirebasePerformance {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'performance');\n  const perfInstance = provider.getImmediate() as PerformanceController;\n  return perfInstance;\n}\n\n/**\n * Returns a {@link FirebasePerformance} instance for the given app. Can only be called once.\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @param settings - Optional settings for the {@link FirebasePerformance} instance.\n * @public\n */\nexport function initializePerformance(\n  app: FirebaseApp,\n  settings?: PerformanceSettings\n): FirebasePerformance {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'performance');\n\n  // throw if an instance was already created.\n  // It could happen if initializePerformance() is called more than once, or getPerformance() is called first.\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialSettings = provider.getOptions() as PerformanceSettings;\n    if (deepEqual(initialSettings, settings ?? {})) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.ALREADY_INITIALIZED);\n    }\n  }\n\n  const perfInstance = provider.initialize({\n    options: settings\n  }) as PerformanceController;\n  return perfInstance;\n}\n\n/**\n * Returns a new `PerformanceTrace` instance.\n * @param performance - The {@link FirebasePerformance} instance to use.\n * @param name - The name of the trace.\n * @public\n */\nexport function trace(\n  performance: FirebasePerformance,\n  name: string\n): PerformanceTrace {\n  performance = getModularInstance(performance);\n  return new Trace(performance as PerformanceController, name);\n}\n\nconst factory: InstanceFactory<'performance'> = (\n  container: ComponentContainer,\n  { options: settings }: { options?: PerformanceSettings }\n) => {\n  // Dependencies\n  const app = container.getProvider('app').getImmediate();\n  const installations = container\n    .getProvider('installations-internal')\n    .getImmediate();\n\n  if (app.name !== DEFAULT_ENTRY_NAME) {\n    throw ERROR_FACTORY.create(ErrorCode.FB_NOT_DEFAULT);\n  }\n  if (typeof window === 'undefined') {\n    throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n  }\n  setupApi(window);\n  const perfInstance = new PerformanceController(app, installations);\n  perfInstance._init(settings);\n\n  return perfInstance;\n};\n\nfunction registerPerformance(): void {\n  _registerComponent(\n    new Component('performance', factory, ComponentType.PUBLIC)\n  );\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterPerformance();\n\nexport { FirebasePerformance, PerformanceSettings, PerformanceTrace };\n"]},"metadata":{},"sourceType":"module"}