{"ast":null,"code":"export var vertex = \"\\nuniform float time;\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nuniform vec2 pixels;\\nfloat PI = 3.141592653589793238;\\nvoid main() {\\n  vUv = uv;\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\\n\";\nexport var fragment = \"\\nuniform float time;\\nuniform float progress;\\nuniform sampler2D sceneRoom;\\nuniform sampler2D sceneSite;\\nuniform vec4 resolution;\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nfloat PI = 3.141592653589793238;\\nvec4 finalTexture;\\nvec4 sRoom; \\nvec4 sSite;\\n\\n\\nvec2 distort(vec2 olduv, float pr, float expo){\\n  vec2 p0 = 2.*olduv - 1.;\\n  vec2 p1 = p0/(1. - pr*length(p0)*expo);\\n\\n  return (p1 + 1.)*0.5;\\n}\\n\\n\\nvoid main()\\t{\\n\\n  float progress1 = smoothstep(0.4, 1.,progress);\\n\\n  vec2 uv1 = distort(vUv,\\n     -10.*pow(0.5 + 0.5*progress, 32.), \\n     progress*4.);\\n\\n  vec2 uv2 = distort(vUv, \\n    -10.*(1. - progress1), \\n    progress*4.);\\n  \\n\\n    sRoom = texture2D(sceneRoom, uv2);\\n    sSite = texture2D(sceneSite, uv1);\\n\\n  float mixer = progress1;\\n\\n\\tgl_FragColor = vec4(vUv,0.0,1.);\\n\\tgl_FragColor = sRoom;\\n\\n\\n\\n     finalTexture = mix(sSite,sRoom, mixer);\\n\\n\\tgl_FragColor = finalTexture;\\n}\\n\";","map":{"version":3,"names":["vertex","fragment"],"sources":["/Users/coderschool/dev/Zion/newrepo/gat-dev/src/threeJs/Shaders/ShaderEnter.js"],"sourcesContent":["export const vertex = `\nuniform float time;\nvarying vec2 vUv;\nvarying vec3 vPosition;\nuniform vec2 pixels;\nfloat PI = 3.141592653589793238;\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n`;\n\nexport const fragment = `\nuniform float time;\nuniform float progress;\nuniform sampler2D sceneRoom;\nuniform sampler2D sceneSite;\nuniform vec4 resolution;\nvarying vec2 vUv;\nvarying vec3 vPosition;\nfloat PI = 3.141592653589793238;\nvec4 finalTexture;\nvec4 sRoom; \nvec4 sSite;\n\n\nvec2 distort(vec2 olduv, float pr, float expo){\n  vec2 p0 = 2.*olduv - 1.;\n  vec2 p1 = p0/(1. - pr*length(p0)*expo);\n\n  return (p1 + 1.)*0.5;\n}\n\n\nvoid main()\t{\n\n  float progress1 = smoothstep(0.4, 1.,progress);\n\n  vec2 uv1 = distort(vUv,\n     -10.*pow(0.5 + 0.5*progress, 32.), \n     progress*4.);\n\n  vec2 uv2 = distort(vUv, \n    -10.*(1. - progress1), \n    progress*4.);\n  \n\n    sRoom = texture2D(sceneRoom, uv2);\n    sSite = texture2D(sceneSite, uv1);\n\n  float mixer = progress1;\n\n\tgl_FragColor = vec4(vUv,0.0,1.);\n\tgl_FragColor = sRoom;\n\n\n\n     finalTexture = mix(sSite,sRoom, mixer);\n\n\tgl_FragColor = finalTexture;\n}\n`;\n"],"mappings":"AAAA,OAAO,IAAMA,MAAM,4OAAZ;AAYP,OAAO,IAAMC,QAAQ,g6BAAd"},"metadata":{},"sourceType":"module"}